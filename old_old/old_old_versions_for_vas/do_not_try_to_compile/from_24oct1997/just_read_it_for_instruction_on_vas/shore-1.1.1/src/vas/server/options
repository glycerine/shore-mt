# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#
# $Header: /p/shore/shore_cvs/src/vas/server/options,v 1.3 1997/08/05 19:45:28 solomon Exp $
#
# Example .rc file for shore value-added server, svas tester, 
# and example applications.
#
# Edit a copy of this as you see fit, and save it as
# ~/.shoreconfig or ./.shoreconfig.
# Alternatively, you can store is somewhere else and
# set your environment variable SHORE_RC to the name 
# of the edited file, so that the Shore server can find it.
#

# Options have the form:
#		type.class.progname.option
#
# type = general type of program (usually shore, but application
#		can override that)
# class = class of program within type (server or client or whatever
#		application chooses)
# progname = program executable name (don't use a.out)
# option = specific name of option
#
# e.g., shore.oo7.bench.op  
#		shore.server.shutdown.svas_host
#

################################################
#                                              #
#	SHORE SERVER PROGRAM                       #
#                                              #
################################################

################################################
# ssm required options -- user must set these
#
# ssh is the shore storage manager tester
# shore is the full-blown shore value-added server
# For the required options, we'll use "*" to 
# indicate all server programs will use the
# same bufpoolsize and logdir
#

#      log directory for all ssh programs
# 		-if you want your log to be on a different device,
# 		change sm_logdir or make log a link somewhere into
# 		the desired device
#
shore.server.*.sm_logdir: ./log

#      buffer pool size for any program
shore.server.*.sm_bufpoolsize: 320

################################################
# ssm optional options -- user may set these
# but can leave them all out also
# they are listed here only for documentation,
# but we comment them out
#
# to get a list of the possibilities, do
#	shore -h
# that prints a list of the options and their
# default values.  Optional ones are printed
# inside [], required ones are printed without the
# enclosing square brackets
#
# ok-- here's the list

# 	change this to turn off logging -- sm_logdir is
# 	required in either case
# shore.server.shore.sm_logging: yes


#	cap on the size of the log
shore.server.shore.sm_logsize: 10240

#	yes is not implemented in Beta
# 	(still under development)
# shore.server.shore.sm_multiserver: no

# by default error message go to stderr (-)
# shore.server.shore.sm_errlog: -
# shore.server.shore.sm_errlog_level: info

# where the shore server can find its auxiliary process
shore.server.shore.sm_diskrw: PUT-YOUR-INSTALLED-DIR-HERE/bin/diskrw

################################################
# svas options -- all are optional, strictly
# 	speaking 
################################################
#
# NB:  A shore server can come up without a root
# volume, but you cannot do anything with it
# except format volumes and mount them.
#
# if you want your data volumes to be anywhere other
# than on ./volumes, do this:
# 	make a copy of the shore.rc file 
# 	make svas_shellrc point to your copy,
#   edit your shore.rc to change the location of your volumes
#   change svas_root to point to your new root volume
#
shore.server.shore.svas_root: ./volumes/miniroot 10

# If you put this volume back in the volume table in the
# Tcl commands start-up file (shore.rc), you should also
# put it back in here:
# shore.server.shore.svas_serve: ./volumes/vol8k

# server will run in foreground with a Tcl shell
# default is "yes"
# shore.server.shore.svas_tclshell: yes

#  the shell will read a "startup script" when
# the server starts; its name will be "shore.rc"
# unless you set the next option to another name.
#
# Specify the location of shore.rc 
#
shore.server.shore.svas_shellrc: ~/shore.rc

# shore.server.shore.svas_nfsd_port: 2999
# shore.server.shore.svas_nfsd_log: -
# shore.server.shore.svas_nfsd_log_level: error

# shore.server.shore.svas_mountd_port: 2997
# shore.server.shore.svas_mountd_log: -
# shore.server.shore.svas_mountd_log_level: error

# shore.server.shore.svas_client_port: 2999
# shore.server.shore.svas_client_log: -
# shore.server.shore.svas_client_log_level: error

# Notice the "?" here -- that's so it applies
# to both "shore" and to "sshutdown" 
# (when not commented out)
# shore.server.?.svas_remote_port: 2998

# logging errors for general server activity
# other than that specific to client service,
# nfs service, or mount service
# shore.server.shore.svas_log: -

# svas_noshm prohibits use of shared-memory
# for communicating with clients. This is
# mostly for debugging purposes
# shore.server.shore.svas_noshm: no

# use of portmapper:
# if you want any of these services to
# register with the portmapper for the
# purpose of client rendezvous, set the
# appropriate option to "yes".  
# NB: If you do so, the configuration 
# options for the clients
# MUST SPECIFY ....svas_use_pmap: yes
# You will probably have trouble if you 
# try this with nfs.
#
shore.server.?.svas_remote_pmap: yes
shore.server.shore.svas_client_pmap: yes
# shore.server.shore.svas_nfsd_pmap: yes
# shore.server.shore.svas_mountd_pmap: yes
#
# If any of the above services registers
# with the portmapper, you have a choice in how
# to deal with the case in which the shore
# server cannot register with the portmapper
# because a service is already registered.
# (e.g., you killed your server with ^C,
# and left the service registered.)  In that
# case, you can set this option to "yes",
# to cause the shore server to unregister
# the service and re-register it.
# BEWARE -- by doing this, you can unregister
# a legitmately-running server.
# (This option is here mostly for development
# purposes.)
# shore.server.shore.svas_rpc_unregister: yes

# If you'd like the server to print a message
# on its standard output every time a user
# encounters an error, set this to "yes"
# shore.server.shore.svas_print_user_errors: yes

# Don't fiddle with this: it's probably going
# to be removed in future versions.  It's for
# experimentation.
# shore.server.shore.svas_sysp_cache_size: 1

################################################
#                                              #
#	SSHUTDOWN PROGRAM                          #
# 	uses all the client options, but it's      #
#   really class "server", and reads server    #
#   options svas_remote_pmap  				   #
#   and svas_remote_port to determine how to   #
#   rendez-vous with a server                  #
#                                              #
################################################
#
# shore.client.sshutdown.svas_host: localhost
# shore.client.sshutdown.svas_remote_port: 2998
shore.client.sshutdown.svas_remote_pmap: yes
#

################################################
#                                              #
#	EXAMPLE APPLICATION PROGRAM                #
#                                              #
################################################
# These all have defaults and we don't need
# to set them unless we change the defaults
# for the server or want different client 
# behavior:
#
# shore.client.?.svas_host: localhost
# shore.client.?.svas_port: 2999
# shore.client.?.svas_log: -
shore.client.?.svas_use_pmap: yes
# audit is very costly -- for debugging only
# shore.client.?.svas_audit: no
# shore.client.?.svas_print_user_errors: no

# defaults need to be changed for these
# svas_shm_small_obj is the #KB of shared memory
# used for transfer of pages of 
# small anonymous objects TO the client when
# a stat or read is done.
#
# svas_shm_large_obj is the #KB of shared memory
# used for transfer of large objects and registered 
# objects to or from the server, and all updates 
# of any kind of object to the server.
# 
# Of course, these values only apply when the
# server is on the same machine as the client.
#
shore.client.?.svas_shm_small_obj: 128
shore.client.?.svas_shm_large_obj: 128

################################################
#                                              #
#	OO7 (APPLICATION PROGRAM)                  #
#                                              #
################################################
shore.oo7.*.configfile: oo7.config.little
shore.oo7.bench.op: t1
shore.oo7.bench.count: 10
shore.oo7.bench.many_xact: no
shore.oo7.?.svas_shm_small_obj: 128
shore.oo7.?.svas_shm_large_obj: 128
