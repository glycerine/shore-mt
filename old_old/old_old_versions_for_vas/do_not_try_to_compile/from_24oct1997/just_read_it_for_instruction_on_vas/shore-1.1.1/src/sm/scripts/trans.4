# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#
# Test prepared xcts and temporary files after restart without
# manually remounting the volumes.  The restart should keep the
# required volume mounted and destroy non-locked tmp files.
#
# fid    created in xct 1, should remain after xct 2 aborts
# tfid1  tmp created in xct 1, not used in xct 2, should be destroyed on restart
# tfid2  tmp created in xct 1, updated in xct 2, should remain after xct 2 aborts
# tfid3  tmp created in xct 1, read in xct 2, should be destroyed on restart
# tfid4  tmp created in xct 2, should exist after restart, destroyed in abort
#

proc check_file_gone {fid} {
    global Use_logical_id

    verbose trying to add record to file $fid
	if [catch {sm destroy_file $fid} catcherr] {
		verbose (EXPECTED) scan_rids error: $catcherr
		if {$Use_logical_id} {
			assert {error_is $catcherr E_BADLOGICALID}
		} else {
			assert {error_is $catcherr E_BADSTID}
		}
	}
}

proc test {clean} {
    global volid

	verbose begin xct 1
	sm begin_xct
	set fid [sm create_file $volid]
	verbose created file fid=$fid
	set tfid1 [sm create_file $volid tmp]
	verbose created tmp file tfid1=$tfid1
	set tfid2 [sm create_file $volid tmp]
	verbose created tmp file tfid2=$tfid2
	set tfid3 [sm create_file $volid tmp]
	verbose created tmp file tfid3=$tfid3
	set trid3 [sm create_rec $tfid3 header 4 body]
	verbose created rec $trid3
	sm commit_xct

	verbose
	verbose begin xct 2
	sm begin_xct
	set rid [sm create_rec $fid header 4 body]
	verbose rid=$rid

	set trid2 [sm create_rec $tfid2 header 4 body]
	verbose trid2=$trid2

	set value [sm read_rec $trid3 0 0]
	verbose read rec $trid3
	verbose $value

	set tfid4 [sm create_file $volid tmp]
	verbose created tmp file tfid4=$tfid4
	set trid4 [sm create_rec $tfid4 header 4 body]
	verbose trid4=$trid4

	verbose
	verbose "Enter 2 pc"
	sm enter2pc "globalXctId"
	sm set_coordinator none

	set vote [sm prepare_xct]
	verbose vote=$vote

	verbose
	verbose restarting without manually remounting volumes...
	sm restart $clean
	verbose restarted

	verbose
	set t [sm recover2pc "globalXctId"]
	assert {expr $t != 0}
	assert {expr [string compare [sm xct] $t] != 0}
	verbose xct ABORTING
	sm abort_xct
	verbose xct ABORTED

	verbose
	sm begin_xct
	sm destroy_file $fid
	check_file_gone $tfid1
	sm destroy_file $tfid2
	check_file_gone $tfid3
	check_file_gone $tfid4
	sm commit_xct
}

if {!$Use_logical_id} {
	source $script_dir/vol.init

	verbose
	verbose TESTING with unclean restart
	test false
	verbose
	verbose
	verbose TESTING with clean restart
	test true
}  else  {
	echo WARNING: trans.4 cannot be run (since logical IDs are turned on)
	verbose WARNING: until we destroy tmp files properly on dismount for logical ids
}
