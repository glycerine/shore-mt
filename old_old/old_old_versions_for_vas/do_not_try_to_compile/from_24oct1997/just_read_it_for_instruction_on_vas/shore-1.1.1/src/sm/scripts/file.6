# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#
#	Test Create, Destroy, Read of Records
#
source $script_dir/vol.init

if { $logging==0 } {
    echo "Logging off: script not run. "
} else {

set_config_info

set num_rec [expr $page_size/2]


# change hdr and body definitions to use zvecs
#
# set id_hdr_width zvec%d
set id_hdr_width zvec6
# set id_body_width zvec%d
set id_body_width zvec8

proc check_zhdr { i sizes }  {
    global id_hdr_width
    set id [format $id_hdr_width $i]
    scan $id "zvec%d" width
    scan $sizes "size(h.b)=%d.%d" h b
    verbose HDR: $i $id width=$width
    assert {expr $width == $h}
}
proc check_zbody { i sizes }  {
    global id_body_width
    set id [format $id_body_width $i]
    scan $id "zvec%d" width
    scan $sizes "size(h.b)=%d.%d" h b
    verbose BODY: $i $id width=$width
    assert {expr $width == $b}
}

# source $script_dir/file.3a

###############################################
#   insert num_rec records
#
sm begin_xct
set fid [sm create_file $volid regular]

set rid(0) $null_rid
verbose creating $num_rec 
for {set i 1} {$i <= $num_rec} {incr i} {
    set rid($i) [
	sm create_rec $fid [format $id_hdr_width $i] 10 [format $id_body_width $i]
    ]
}

verbose getting stats before abort of record creations
verbose [dstats $volid]

verbose aborting
sm abort_xct

verbose after abort
sm begin_xct

verbose getting stats after abort of record creations
verbose [dstats $volid]

verbose recreating $num_rec
set fid [sm create_file $volid regular]

set rid(0) $null_rid
verbose creating $num_rec 
for {set i 1} {$i <= $num_rec} {incr i} {
    set rid($i) [
	sm create_rec $fid [format $id_hdr_width $i] 10 [format $id_body_width $i]
    ]
}
verbose [dstats $volid]
sm commit_xct

###############################################
#   read inserted records
#
verbose reading $num_rec
sm begin_xct
for {set i 1} {$i <= $num_rec} {incr i} {
    catch {unset r}
    set r [sm read_rec $rid($i) 0 0]
    set id [format $id_hdr_width $i]
    set id_body [format $id_body_width $i]
    verbose $i $id $id_body $r
    set hdr [lindex $r 2]
    set body [lindex $r 4]
	check_zhdr $i [lindex $r 1]
	check_zbody $i [lindex $r 1]
}

verbose scanning after separate scan using pin
sm scan_recs $fid

sm commit_xct

###############################################
#   delete all odd records
verbose delete all odd records
sm begin_xct
set abort_check 2
while {$abort_check >= 1} {
    sm abort_xct
    sm begin_xct
    verbose checking stats after destroy was aborted
    verbose [dstats $volid]
    verbose destroying [expr $num_rec/2]
    for {set i 1} {$i <= $num_rec} {incr i; incr i} {
	sm destroy_rec $rid($i)
    }
    set abort_check [expr {$abort_check - 1}]

    verbose checking stats after destroy
    verbose [dstats $volid]
}
sm commit_xct

###############################################
#   re-read even records
#
verbose re-read even records
sm begin_xct
for {set i 2} {$i <= $num_rec} {incr i; incr i} {
    set r [sm read_rec $rid($i) 0 0]
    set id [format $id_hdr_width $i]
    set id_body [format $id_body_width $i]
    verbose $i $id $id_body $r
    set hdr [lindex $r 2]
    set body [lindex $r 4]
    check_zhdr $i [lindex $r 1]
    check_zbody $i [lindex $r 1]
}
verbose trying an odd record -- THIS SHOULD GENERATE AN ERROR
catch {[sm read_rec $rid(1) 0 0]} result
verbose (EXPECTED error E_BADSLOTNUMBER or similar): $result

verbose trying an even record
verbose [sm read_rec $rid(2) 0 0]

verbose [dstats $volid]
verbose volume_quota [sm get_volume_quota $volid]

sm commit_xct

verbose volume_quota [sm get_volume_quota $volid]
verbose sm_stats [sm gather_stats]

sm begin_xct

verbose destroying all records ...
set scan [sm scan_file_create $fid t_cc_file]
verbose scan_file_create returned $scan
set pin [sm scan_file_next $scan 0]
verbose scan_file_next returned $pin
while {$pin != "NULL"} {
    sm destroy_rec [sm pin_rid $pin]
    set pin [sm scan_file_next $scan 0]
	verbose scan_file_next returned $pin
}
sm scan_file_destroy $scan

verbose destroying file $fid
sm destroy_file $fid
sm commit_xct

sm begin_xct
verbose [dstats $volid]
verbose volume_quota [sm get_volume_quota $volid]
verbose sm_stats [sm gather_stats]
sm commit_xct

unset rid
unset r

unset result id_body id fid hdr num_rec abort_check i body
unset pin scan

}
