# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#  Testing the following multi-thread-per-tx scenarios
#
#  scenario 2 
#  thread 1-m: EX lock o1
#  thread 2-m: EX lock o2
#  thread 1-s: SH lock o2 blocks on cond variable
#  thread 2-s: SH lock o1 detects deadlock
# 

set_config_info

# source $script_dir/vol.init

if {$multi_threaded_xct == 0 } {
	echo "Not configured for multi-threaded xcts"
} else {
set sp [sm preemption_simulated]
sm simulate_preemption off

set o1			"k(s(10.0).100.200)"
set o2			"k(s(10.0).100.340)"

proc tm {x o1 o2} {
    global aborted_xct
    link_to_inter_thread_comm_buffer aborted_xct

    sm attach_xct $x
sync
	set tid [sm xct_to_tid [sm xct]]
	verbose tm $x $tid locking EX $o1

	catch {sm lock $o1 EX LONG} err
	if [error_is $err E_DEADLOCK] {
	   verbose tm caught : $err
	   verbose (will have to abort)
	   sm abort_xct
	   set aborted_xct $x
	   return
	}
	verbose result of lock is $err
	verbose tm $x acquired EX $o1, syncing
	sm detach_xct $x
	verbose tm -- detached
}
proc ts {x o1 o2} {
    global aborted_xct
    link_to_inter_thread_comm_buffer aborted_xct

    sm attach_xct $x
sync
	set tid [sm xct_to_tid [sm xct]]
	verbose ts $x $tid locking SH $o2
	catch {sm lock $o2 SH LONG} err
	if [error_is $err E_DEADLOCK] {
	   verbose ts caught : $err
	   verbose (will have to abort)
	   sm abort_xct
	   set aborted_xct $x
	   return
	}
	verbose result of lock is $err
	verbose ts $x acquired SH $o2, syncing
	sm detach_xct $x
	verbose ts -- detached
}

##########  main  ##########

	link_to_inter_thread_comm_buffer aborted_xct
	set aborted_xct ""

	# start t1
	sm begin_xct
	set tid [sm xct_to_tid [sm xct]]
	set t1 [sm xct]
    verbose xct $t1 $tid
	sm detach_xct $t1
    verbose forking y1
    set y1 [fork_thread tm {$t1 $o1 $o2}]
	verbose forking y3
    set y3 [fork_thread ts {$t1 $o1 $o2}]



	# start t2
	sm begin_xct
	set tid [sm xct_to_tid [sm xct]]
	set t2 [sm xct]
	verbose xct $t2 $tid
	sm detach_xct $t2
	verbose forking y2
    set y2 [fork_thread tm {$t2 $o2 $o1}]
	verbose forking y4
    set y4 [fork_thread ts {$t2 $o2 $o1}]

    verbose sync_thread $y1 $y2 $y3 $y4
    sync_thread $y1 $y2 $y3 $y4

    join_thread $y1 $y2 $y3 $y4

	if {$aborted_xct != $t1} {
	    verbose committing $t1
	    sm attach_xct $t1
	    sm commit_xct
	} else {
	    verbose $t1 already aborted
	}

	if {$aborted_xct != $t2} {
	    verbose committing $t2
	    sm attach_xct $t2
	    sm commit_xct
	} else {
	    verbose $t2 already aborted
	}
	 
sm simulate_preemption $sp

verbose "SUCCESS"
unset t1 t2 tid
unset y1 y2 y3 y4
unset o1 o2
# can't unset aborted_xct -- it's linked to the comm buffer.
addcleanupvars {aborted_xct}
}
