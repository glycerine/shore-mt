# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

set old_short_form $short_form
set short_form %0100d

#
#  Load a btree, and verify its content
#
proc scan_up_partial {ndx lb ub nrec} {
    verbose "scan up partial:" $lb $ub 
    set scan [sm create_scan $ndx >= $lb <= $ub]

    set lb [string trimleft $lb 0]
    set ub [string trimleft $ub 0]

    for {set i 1} {$i <= $nrec} {incr i} {
	set r [sm scan_next $scan]
        if {[string compare $r eof] == 0} then { break }
	set key [string trimleft [lindex $r 0] 0]
	set el [lindex $r 1]
	verbose "scanned ($key, $el)"
	assert {expr $key == $el}
	assert {expr $key == $lb + $i - 1}
    }
    assert {expr $i > $nrec}
    assert {expr [string compare [sm scan_next $scan] eof] == 0}
    sm destroy_scan $scan
    verbose "---- successful"
}

proc scan_up {ndx nrec}  {
    #
    # verify ascending
    #
    verbose "scan up:"
    set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
    for {set i 1} {$i <= $nrec} {incr i}  {
        set r [sm scan_next $scan]
	if {[string compare $r eof] == 0} then { break }
        set key [string trimleft [lindex $r 0] 0]
        set el [lindex $r 1]
        verbose "scanned ($key, $el)"
        assert {expr $key == $el}
        assert {expr $i == $key}
    }
    assert {expr $i > $nrec}
    assert {expr [string compare [sm scan_next $scan] eof] == 0}
    sm destroy_scan $scan
    verbose "---- successful"
}

proc probe {ndx nrec} {
    global short_form
    verbose "probe:"
    for {set i 1} {$i <= $nrec} {incr i} {
        set el [sm find_assoc $ndx [format $short_form $i]]
        assert {expr $i == $el}
        verbose probed $i
    }
    verbose "---- successful"
}

#
# start up
#
source $script_dir/vol.init

if {$logging==0} {
    echo "Logging off: script not run. "
} else {
    verbose [sm gather_stats reset]

    set nrec 120

    #
    # create index and load it up 
    #
    sm begin_xct
    set ndx [sm create_index $volid btree]
    verbose created index $ndx
    sm commit_xct

    sm begin_xct
    for {set i 1} {$i <= $nrec} {incr i} {
	verbose inserting $i
	sm create_assoc $ndx [format $short_form $i] $i
    }

    verbose restart
    restart

    sm begin_xct
    verbose scan_up $ndx 0
    scan_up $ndx 0
    sm destroy_index $ndx
    sm commit_xct

    sm begin_xct
    set ndx [sm create_index $volid btree]
    verbose created index $ndx
    for {set i 1} {$i <= $nrec} {incr i} {
	verbose inserting $i
	sm create_assoc $ndx [format $short_form $i] $i
    }

    sm commit_xct
    verbose after create
    dstats $ndx

    if {$logging==1} {
	verbose restart
	restart

	sm begin_xct
	scan_up $ndx $nrec
	probe $ndx $nrec
	scan_up_partial $ndx [format $short_form 2] \
		    [format $short_form [expr {$nrec - 1}]] [expr {$nrec - 2}]
	sm destroy_index $ndx
	sm commit_xct
    }

    verbose [sm gather_stats]

    unset ndx
    unset nrec
    unset i
}
set short_form $old_short_form
unset old_short_form
