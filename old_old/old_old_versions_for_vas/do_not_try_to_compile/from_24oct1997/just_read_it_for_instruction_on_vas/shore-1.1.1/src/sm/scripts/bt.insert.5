#
# Make a very large btree --
# see if we can get it to 3 levels
#

source $script_dir/vol.init
source $script_dir/bt.lib

if {$logging==0} {
    echo "Logging off: script not run. "
} else {

set unique btree


set prefixa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
set prefixb bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
set prefixc ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
set keylist { aaa4000 }


# create a key list in largely random order
set k 0
for { set i 1 } { $i <= 800 } { incr i } {
    set used($i) 0
}
for { set i 1 } { $i <= 800 } { incr i } {
    set k [expr 1 + [random 800]]
    set j $prefixa$prefixb$prefixc[expr 4000 + $k]
    if {$unique == "btree" } {
	if { $used($k) == 1 } {
	   continue
	}
    }
    lappend keylist $j
    set used($k) 1
}
# add what was missed
for { set i 1 } { $i <= 800 } { incr i } {
    if { $used($i) == 0 } {
	set j $prefixa$prefixb$prefixc[expr 4000 + $i]
	lappend keylist $i
	set used($i) 1
    }
}
# verify
for { set i 1 } { $i <= 800 } { incr i } {
    assert {expr $used($i) == 1}
}

proc mkval { i e } {
    global max_btree_entry_size
    set maxsize [expr {$max_btree_entry_size / 2}]
    set res [format "%0*s" $maxsize a]
    return $res
}

source $script_dir/bt.insert.0

unset prefixa prefixb prefixc
unset keylist unique j k used
}
