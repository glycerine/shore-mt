# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#
#	Time writing 
#   Parameters: 
#   	        size of objects written 
#		(write size== whole object)
#		logging on or off
#
#  The first 10 % of the objects are hot. 
#
#
# NB: the first time you run this on a new volume, you will get some 
# multiple of 100 objects created; the transaction creating the last 100
# will run out of disk space and abort.  Thereafter, you must set
# the value of fid" to indicate that the file already exists.
#
#

# set STARTOVER 1

if [is_set STARTOVER] {
    set fid 0
} else {
    set dont_force_reformat 1
    set fid s(1.4)
    set volid 1
}

source $script_dir/vol.init


# set objsize [expr {8192 * 5}]
set objsize 7000

#ignored for now
set logging 0

set config [sm config_info]

if {$volid == 0} {
    foreach i $ssh_device_list {
	set dev  [lindex $i 0]
	set size [lindex $i 1]
	set vol  [lindex $i 2]

	sm mount_dev $dev $vol

	set vol_list [sm list_volumes $dev]
	if { [llength $vol_list] == 0 } {
	    set quota [sm get_device_quota $dev]
	    echo creating volume $vol size $size on $dev
	    sm create_vol $dev $vol $size
	}

	set quota [sm get_device_quota $dev]
	set quota [sm get_volume_quota $vol]

	set vol_list [sm list_volumes $dev]
	assert {[expr [llength $vol_list] == 1]}
	assert {[expr [string compare [lindex $vol_list 0] $vol.0.0.0:0] == 0]}
    }
}
if {$volid == 0} {
    set volid [lindex [lindex $ssh_device_list 0] 2]
}

echo mounted everything....

set volsize [lindex [sm get_volume_quota $volid] 0]
set used [lindex [sm get_volume_quota $volid] 1]
set volsize [expr {$volsize - $used} ]
set objksize [expr {$objsize / 1024} ]
set nobjs [expr {$volsize / $objksize} ]
unset objksize

set hdr "" 
set id_body_width zvec%d
set body [format $id_body_width $objsize]

# 
# create a huge file
#
sm begin_xct
    if {$fid==0} {
	set fid [sm create_file $volid ]
	echo fid=$fid
	sm commit_xct
	sm begin_xct
	echo creating $nobjs objects of size $objsize 
	set total 0
	for {set i 0} {$i < $nobjs} {incr i} {
	    echo $i
	    set r($total) [sm create_rec $fid $hdr $objsize $body]
	    if { $i == 100 } {
		echo committing $i for a total of $total
		sm commit_xct
		set $nobjs [expr { $nobjs - $i }]
		echo $nobjs left to do ... 
		set i 0
		echo sm begin_xct
		sm begin_xct
	    }
	    incr total
	}
	echo done creating...
    } else { 
	# have to scan to set up r($i)
	echo scanning $fid ....
	set scan [sm scan_file_create $fid t_cc_record]
	set pin [sm scan_file_next $scan 0]
	set i 0
	while {$pin != "NULL"} {
	    set r($i) [sm pin_rid $pin]
	    # don't ruin scan context
	    # sm pin_unpin $pin
	    set pin [sm scan_file_next $scan 0]
	    set i [expr {$i+1} ]
	}
	sm scan_file_destroy $scan
	echo file $fid contains $i objects
    }
#   clear the buffer pool, invalidate 
    sm force_buffers true
sm commit_xct

set nobjs 5000
set hot   [expr $nobjs / 10]
set tbytes 0

proc dohot { i } {
    global tbytes
    global hot
    global r
    global body
    global objsize

    if { [expr {$i % 2}] == 0 } {
	set j [random $hot]
	sm update_rec $r($j) 0 $body
	incr tbytes $objsize
    }
}

echo "doing wtime..."

#   clear the buffer pool, invalidate 
sm force_buffers true

set dummy [sm gather_stats reset]
set wtime [ time {
        set niterations 20
	sm begin_xct
		for {set k 0} {$k < $niterations} {incr k} {
		    for {set i 0} {$i < $nobjs} {incr i} {
			    sm update_rec $r($i) 0 $body
			    incr tbytes $objsize
			    dohot $i
		    }
		}
	sm force_buffers true
	sm commit_xct
} 1 ]
echo

echo WROTE $nobjs RECS, $hot HOT RECS, forced buffers: 
pstats
set dummy [sm gather_stats reset]

echo 
echo total write time = $wtime
set msec [lindex $wtime 0]
set sec [expr {$msec / 1000000} ]
echo [expr {$tbytes / $sec}] bytes per second
pstats
