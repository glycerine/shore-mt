# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#
#  Recovery test: deallocate and extent and reallocate to another
#  store (btree) and then crash.
#  Should only need one thread for this, but in order to make it
#  crash, we need an intervening thread to insert something into
#  the btree (so that the btree pages aren't recycled on abort)
#  IN this case, when we reallocate, we want to insert it
#  into a btree, so the extent allocation is compensated
#  (withing the btree op).  Undo had better work.
#  (Before we assigned transaction IDs to the extents, this
#  was a problem)
# 
#  alloc.9 reallocates to another file (ok)
#

source $script_dir/vol.init

set_config_info
# format for body size -- >= one page
set old_short_form $short_form

set form %0${lg_rec_page_space}d
set mx [expr $max_btree_entry_size - 5]
set short_forma %0${mx}dA
set short_formb %0${mx}dB
set ashort_form "A%30d"
set bshort_form "B%30d"

# minimumm size to cause the problem: > one extent's worth of pages:
set nrecs 9


#
# first simply create the files
#

sm begin_xct
set f0 [sm create_file $volid]
set f1 [sm create_index $volid btree]
verbose created files $f0 $f1

# populate file 0
for { set i 1} { $i <= $nrecs} { incr i} {
    set j [sm create_rec $f0 h$i 1000 [format $form $i] ]
    set rid($i) $j
    verbose created rec $rid($i)
}
verbose created $nrecs recs file $f0
sm commit_xct

proc t1 {nrecs} {
    global rid f1 f2 short_forma short_formb logging

    sm begin_xct
    # turn off lock escalation since it causes deadlock with the sync's
    sm set_escalation_thresholds {0 0 0}
    set tid [sm xct_to_tid [sm xct]]
    # destroy  everything in the file but not the file itself
    for { set i 1} { $i <= $nrecs} { incr i} {
	verbose t1: $tid: sm destroy_rec $rid($i) ...
	sm destroy_rec $rid($i)
	verbose t1: $tid: destroyed $rid($i)
    }
    verbose t1: $tid: sync 0
    sync

    #create a bunch of recs in file 1, hoping we reallocate
    # the extents
    for { set i 1} { $i <= $nrecs} { incr i} {
	verbose t1: $tid: sync $i
	sync
	verbose t1: $tid: sm create_assoc $f1 [format $short_formb $i] 
	catch {sm create_assoc $f1 [format $short_formb $i] $i} err
	verbose t1: $tid: result : $err
    }
    if {$logging==0} {
	verbose Logging off: substituting commit for abort
	sm commit_xct
    } else {
	verbose aborting...
	sm abort_xct
    }
}
proc t2 {nrecs} {
    global f1  bshort_form ashort_form
    for { set i 1} { $i <= $nrecs} { incr i} {
	sm begin_xct
        # turn off lock escalation since it causes deadlock with the sync's
        sm set_escalation_thresholds {0 0 0}
	set tid [sm xct_to_tid [sm xct]]
	verbose t2 $tid $tid create_assoc $f1  [format $ashort_form $i]
	catch {sm create_assoc $f1 [format $ashort_form $i] $i} err
	verbose t2 $tid result: $err
	verbose t2 $tid create_assoc $f1  [format $bshort_form $i]
	catch {sm create_assoc $f1 [format $bshort_form $i] $i} err
	verbose t2 $tid result: $err

	verbose t2 $tid sync $i
	sync
	verbose commit_xct
	sm commit_xct
    }
    verbose t2 sync last $i + 1
    sync
}

#
# spawn the threads
#

set y1 [fork_thread t1 $nrecs]
set y2 [fork_thread t2 $nrecs]
for { set i 1} { $i <= $nrecs} { incr i} {
    verbose sync_thread $i 
    sync_thread $y1 $y2
}
sync_thread $y1 $y2
join_thread $y1 $y2

#
# clean up
#
sm begin_xct
verbose destroy_file $f0
sm destroy_file $f0
sm destroy_index $f1
sm commit_xct

unset i j form short_forma short_formb nrecs f0 f1
unset ashort_form bshort_form
unset mx rid y1 y2
set short_form $old_short_form
unset old_short_form
