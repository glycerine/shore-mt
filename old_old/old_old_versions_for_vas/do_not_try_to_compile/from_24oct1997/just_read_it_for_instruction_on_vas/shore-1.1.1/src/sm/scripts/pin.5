# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#
#	Test lock-latch deadlocks: see that they get converted to
# 	lock-lock deadlocks by repin
#
source $script_dir/vol.init

# clear stats
set st [clearstats]

sm begin_xct
set f1 [sm create_file $volid]
verbose f1 = $f1

set r1 [sm create_rec $f1 hdr12345 11 hellodata]
set r2 [sm create_rec $f1 hdr12345 11 hellodata]
set r3 [sm create_rec $f1 hdr12345 11 hellodata]

verbose r1 = $r1 r2 = $r2 
sm commit_xct

proc test { kvl r1 who } {

    sm begin_xct
    set pin1 [sm pin_create]

    if { $who == "scanner" } {
	set mode SH
	verbose $who: pinning $r1 in $mode
	sm pin_pin $pin1 $r1 $mode
    } else {
	verbose $who: pining $r1 in mode SH
	sm pin_pin $pin1 $r1 SH
	set mode EX
	sm lock $kvl $mode LONG
	verbose $who: holds LOCK [sm query_lock $kvl] on $kvl
    }

    sync

    if { $who == "scanner" } {
	set caught 0
	verbose $who: trying to lock $kvl in mode $mode
	set caught [catch {sm lock $kvl $mode LONG} err]
	if {$caught == 0} {
	    verbose $who: holds [sm query_lock $kvl] on $kvl
	}
    }
    sync

    if { $who == "scanner" } {
	verbose $who: got $mode lock on $kvl
    } else {
	verbose $who:  upgrading to EX
	set caught [catch {sm pin_update_rec $pin1 0 DEFG} err]
    }
    sm pin_unpin $pin1
    sm pin_destroy $pin1

    if { $caught } {
	verbose $who: got error $err
	assert { expr {[error_is $err E_DEADLOCK] == 1} }
	sm abort_xct
    } else {
	sm commit_xct
    }
}


# delete key, delete record
set t1 [fork_thread test $r1 $r2 writer]

# look at record, look up key
set t2 [fork_thread test $r1 $r3 scanner]

sync_thread $t1 $t2
sync_thread $t1 $t2
join_thread $t1 $t2

unset f1 r1 r2 r3 st t1 t2
