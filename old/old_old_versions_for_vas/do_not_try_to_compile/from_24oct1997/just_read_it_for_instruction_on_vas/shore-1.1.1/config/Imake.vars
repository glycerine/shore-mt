/* --------------------------------------------------------------- */
/* -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- */
/* -- University of Wisconsin-Madison, subject to the terms     -- */
/* -- and conditions given in the file COPYRIGHT.  All Rights   -- */
/* -- Reserved.                                                 -- */
/* --------------------------------------------------------------- */

/*********************************************************************
This file generates a standard header for Makefiles.
*********************************************************************/


%#>>>>>>>>>>>> $Header: /p/shore/shore_cvs/config/Imake.vars,v 1.7 1997/09/30 21:14:17 solomon Exp $

/*
 *  The solaris /bin/sh is broken.
 *  The AIX test in the aix /bin/sh is broken, well ... it doesn't
 *       work with the shore makefiles.
#if (defined(SOLARIS2) || defined(AIX32) || defined(AIX41)) && !defined(MAKE_SHELL)
#define	MAKE_SHELL	/bin/ksh
#endif

#ifdef MAKE_SHELL
SHELL=MAKE_SHELL
#endif
 */

/* The value of Top is set by tools/makemake to be a relative path
 * from the directory containing the generated Makefile to the top of
 * the source tree (parent directory of config, tools, and src).
 */
TOP = Top

/* Collected sources to used to build .depend */
DEPEND_SOURCE =
/* Collected sources to used to build tags */
TAGS_SOURCE =

/* Directory to install bin, lib, include, and documents */
#ifdef InstallDir
INSTALL_DIR = InstallDir
#else
INSTALL_DIR = $(TOP)/installed
#endif

/* The default for RM wired into GNU make is "rm -f" but the convention
 * used here is that individual rules specify the -f when they want it.
 */
RM = rm

ARCH = Arch
OPSYS = OpSys

/*
 * Compilation Options
 */

#define CompilerGeneralFlags -fno-implicit-templates

#ifdef Debugging
#define CompilerDebugFlags -g
#else
#define CompilerDebugFlags /* empty */
#endif /* not Debugging */

#ifdef Optimize
#define CompilerOptimizeFlags -finline-functions -fexpensive-optimizations -O2
#else
/*
 * The default optimization level for gcc is -O as recommended
 * by Gnu folks.  Plus, this allows things to actually link on the
 * HPs, otherwise some .o's can lead to errors like:
 *    Target of unconditional branch is out of range
 * Of course, this can following the code in the debugger a little tricky.
 */
#define CompilerOptimizeFlags -O -fno-inline
#endif /* Optimize */

/* Programs using Purify products need a set of function stubs
 * to use when they aren't running under the pure product.
 * Note that all three libraries are probably the same, so we need only
 * one of them.
 */
#if		defined(UsePurify)
#define	PurifyLibrary	Purify/pure_stubs.a
#elif	defined(UseQuantify)
#define	PurifyLibrary	Quantify/pure_stubs.a
#elif	defined(UsePureCoverage)
#define	PurifyLibrary	PureCoverage/pure_stubs.a
#else
#define PurifyLibrary
#endif

/* Global libraries used everywhere */
#if defined(IS_RS6000_AIX41) && defined(USE_MPI)
#define GlobalLibraries PurifyLibrary -lm $(MPI_LIB_DIRS)
#elif defined(IS_SOLARIS2)
/* -lsocket is really only needed if you touch the network */
#define GlobalLibraries PurifyLibrary -lm -lnsl -lsocket -lposix4 -ldl
#elif defined(IS_LINUX)
#define GlobalLibraries PurifyLibrary -lm -ldl
#else
#define GlobalLibraries PurifyLibrary -lm 
#endif
/* GLOBAL_LDFLAGS += -lstdc++  ??? */

#ifndef Ar
#if defined(IS_SOLARIS2)
#define Ar /usr/ccs/bin/ar
#else
#define Ar ar
#endif
#endif

/* RPC library includes.
 * On Solaris, use the default (/usr/include) version.  Elsewhere, use the
 * version packaged with Shore.
 */
#if defined(IS_SOLARIS2)
#define RpcInclude
#else
#define RpcInclude Include($(TOP)/src/rpc4.0)
#endif

/* Regular expression library.  A version is included with this distribution
 * in src/common, but on most systems these days, there is a copy in
 * libc.a.
 */
#if 0
#define RegEx regex.c
#else
#define RegEx
#endif

#if defined(IS_HPUX8) || defined(IS_OSF1AD)
#undef Ranlib
#else
#define Ranlib ranlib
#endif

#ifdef UsePurify
#define PurifyFlags Include(Purify) -DPURIFY
#else
#define PurifyFlags /* empty */
#endif

#ifdef UseQuantify
#define QuantifyFlags Include(Quantify) -DQUANTIFY
/* To get basic block analysis, -g is required */
#undef CompilerDebugFlags
#define CompilerDebugFlags -g
#else
#define QuantifyFlags /* empty */
#endif

#ifdef UsePureCoverage
#define PureCoverageFlags -g++=yes Include(PureCoverage) -DPURECOV
#else
#define PureCoverageFlags /* empty */
#endif

#define CompilerOptionFlags -I. -I$(TOP)/config RpcInclude \
	PurifyFlags QuantifyFlags PureCoverageFlags

#define Include(file) -I%|file

#ifdef IncludeDebugCode
#define DDebug -DDEBUG
#else
#define DDebug /* empty */
#endif

/* The following Make variables appear in GNUmake's built-in rules */
CC = Gcc
CXX = GPlusPlus
CFLAGS = DDebug %
	CompilerOptimizeFlags CompilerDebugFlags %
	CompilerOptionFlags %
	CompilerGeneralFlags %
	-D$(ARCH) -D$(OPSYS) %
	MiscCompilerFlags

CXXFLAGS = DDebug %
	CompilerOptimizeFlags CompilerDebugFlags %
	CompilerOptionFlags %
	CompilerGeneralFlags %
	-D$(ARCH) -D$(OPSYS) %
	MiscCompilerFlags

%#<<<<<<<<<<<< end of Imake.vars
