#
# This script demonstrates a bug which occurs
# when four threads try inserting entries to 
# the same btree at the same time, with locality
# and maybe duplicates

# WARNING: this runs for a long time 
#

source $script_dir/vol.init
if {$multi_threaded_xct == 0 } {
    echo "Not configured for multi-threaded xcts"
} else {

    set ntries 50
    set nxct 10


    proc go_go_gadget {threadname ndx seed} {
	global ntries volid nxct short_form cc tx fid
	sync
	for {set j 1} {$j <= $nxct} {incr j} {
	    if {$tx == 0} {
		sm begin_xct
	    } else {
		sm attach_xct $tx
	    }
	    for {set i 1} {$i <= $ntries} {incr i} {
		# sm sleep 1
		set key [expr {$j + ($i * $nxct) + $seed} ]
		set rid [sm create_rec $fid "HDR" 11 "BODY"]
		verbose thread $threadname: creating entry $key "->" $rid 
		# Need binary format of rid
		sm create_assoc $ndx [format $short_form $key ] $rid b*1000 $cc
		# verbose thread $threadname: created entry $key "->" $rid 
	    }
	    if {$tx == 0 } {
		sm commit_xct
	    } else {
		sm detach_xct $tx
	    }
	}
    }

    proc B_go_go_gadget { threadname ndx seed} {
	global ntries volid nxct short_form cc tx fid
	sync
	for {set j $nxct} {$j >= 1} {set j [expr {$j - 1}] } {
	    if {$tx == 0} {
		sm begin_xct
	    } else {
		sm attach_xct $tx
	    }
	    for {set i $ntries} {$i >= 1} {set i [expr {$i - 1}] } {
		# sm sleep 1
		set key [expr {$j + ($i * $nxct) + $seed} ]
		set rid [sm create_rec $fid "HDR" 11 "BODY"]
		verbose thread $threadname: creating entry $key "->" $rid 
		# Need binary format of rid
		sm create_assoc $ndx [format $short_form $key ] $rid b*1000 $cc
		# verbose thread $threadname: created entry $key "->" $rid 
	    }
	    if {$tx == 0} {
		sm commit_xct
	    } else {
		sm detach_xct $tx
	    }
	}
    }



    set nthreads 4

    proc doit {nthreads} {
	sm gather_stats reset
	global t ntries volid nxct short_form cc tx ndx verbose_flag

	set half [expr {$nthreads/2}]
	set half $nthreads
	for {set i 1} {$i <= $half} {incr i} {
	    set q "t$i"
	    set t($i) [fork_thread go_go_gadget $q $ndx $i ]
	    verbose $i: forked thread $t($i)
	}
	 for {set k $half} {$i <= $nthreads} {incr i} {
	    set name "B$i"
	    set t($i) [fork_thread B_go_go_gadget $name $ndx $i ]
	    verbose $i: forked thread $t($i)
	 }
	verbose syncing threads
	for {set k 1} {$k <= $nthreads} {incr k} {
	    set q $t($k)
	    sync_thread  $q
	}
	verbose waiting for threads
	for {set l 1} {$l <= $nthreads} {incr l} {
	    join_thread  $t($l)
	}

	set dummy [sm gather_stats reset]
	verbose $dummy
    }

    foreach cc {t_cc_im t_cc_kvl} {
	sm begin_xct
	set ndx [sm create_index $volid btree regular b*1000 $cc]
	set fid [sm create_file $volid regular]
	sm commit_xct

	set tx 0
	verbose **********************************************
	verbose $cc separate transactions
	verbose **********************************************
	doit $nthreads

	sm begin_xct
	sm destroy_index $ndx
	sm destroy_file $fid
	sm commit_xct
    }
    if {0} {
	# Can't do this yet because of 1thread-mutex
    foreach cc {t_cc_im t_cc_kvl t_cc_modkvl t_cc_none} {
	sm begin_xct
	set ndx [sm create_index $volid btree regular b*1000 $cc]
	set fid [sm create_file $volid regular]
	sm commit_xct

	sm begin_xct
	    set tx [sm xct]
	    verbose **********************************************
	    verbose $cc one multi-threaded transaction
	    verbose **********************************************
	    doit $nthreads
	sm commit_xct

	sm begin_xct
	sm destroy_index $ndx
	sm destroy_file $fid
	sm commit_xct
    }
    }

    verbose threads done

    unset t
    unset ntries nxct ndx fid
}
