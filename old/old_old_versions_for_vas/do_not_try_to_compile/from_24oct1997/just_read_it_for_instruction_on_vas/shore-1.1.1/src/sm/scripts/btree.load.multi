# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#
#  test multiple btree bulk loads
#  with multiple threads in same xct
#

#
# start up
#
source $script_dir/vol.init

if {$multi_threaded_xct == 0 } {
    echo "Not configured for multi-threaded xcts"
    return
}

set nrec 500
set nthreads 5

# for clean-up later
set cmd 0
set thread_list 0
set th 0
set tx 0

if {$multi_threaded_xct == 0 } {
	echo "Not configured for multi-threaded xcts"
} else {

    #
    # helper proc to print the file
    #
    #
    proc print_file {f1 in_xct} {
	if { $in_xct == 0 } {
	    sm begin_xct
	}
	set scan [sm scan_file_create $f1 t_cc_file]
	set i 0
	set pin [sm scan_file_next $scan 0]
	while {$pin != "NULL"}  {
	    incr i
	    set r [sm read_rec [sm pin_rid $pin] 0 0]
	    verbose $i: read $r
	    set pin [sm scan_file_next $scan 0]
	}
	sm scan_file_destroy $scan
	if { $in_xct == 0 } {
	    sm commit_xct
	}
    }
    #
    # helper proc that
    # verifies that the file is ascending
    #
    proc verify { ndx2 nrec str in_xct } {
	global short_form volid
	verbose "scan up:"
	if { $in_xct == 0 } {
	    sm begin_xct
	}
	set scan [sm create_scan $ndx2 >= neg_inf <= pos_inf]
	for {set i 1} {$i <= $nrec} {incr i}  {
	    set r [sm scan_next $scan]
	    if {[string compare $r eof] == 0} then { break }
	    set key [string trimleft [lindex $r 0] 0]
	    set el [lindex $r 1]
	    verbose "scanned ($key, $el)"
	    assert {expr $key == $el}
	    assert {expr $i == $key}
	}
	assert {expr $i > $nrec}
	assert {expr [string compare [sm scan_next $scan] eof] == 0}
	sm destroy_scan $scan
	verbose "---- successful"


	verbose "probe:"
	for {set i 1} {$i <= $nrec} {incr i} {
	    set dummy [sm gather_stats reset]
	    set el [sm find_assoc $ndx2 [format $short_form $i]]
	    if [expr $i == $el] {
		verbose probed $i $el
	    } else {
		pstats
		verbose PROBLEM AT $i $el
	    }
	    assert {expr $i == $el}
	}
	if { $in_xct == 0 } {
	    sm commit_xct
	}
	verbose "verify successful"
    }

    #
    # create files of <key, el> pair (to be sorted later in blkld)
    #
    sm begin_xct
	for {set j 0 }  {$j < $nthreads} {incr j} {
	    set f($j) [sm create_file $volid]
	    for {set i $nrec} {$i > 0} {set i [ expr {$i - 1} ]} {
		sm create_rec $f($j) [format $short_form $i] 10 $i
	    }
	    # print_file $f($j) 0
	}
    sm commit_xct

    proc each_thread {tx j} {
	global f volid nrec
	set f1 $f($j)
	set k [expr { $j * 3 } ]
	sm attach_xct $tx

	verbose sync-A $j
	sync

	set ndx($k) [sm create_index $volid uni_btree]
	verbose $j.$k sm blkld_ndx $ndx($k) $f1 b*1000
	set stat [sm blkld_ndx $ndx($k) $f1 b*1000]

	# verbose  verify $ndx($k) one
	# verify $ndx($k) $nrec one 1

	incr k

	set ndx($k) [sm create_index $volid uni_btree]
	verbose $j.$k sm blkld_ndx $ndx($k) $f1 b*1000
	set stat [sm blkld_ndx $ndx($k) $f1 b*1000]
	# verbose verify $ndx($k) two
	# verify $ndx($k) $nrec two 1

	incr k

	set ndx($k) [sm create_index $volid uni_btree]
	verbose $j.$k sm blkld_ndx $ndx($k) $f1 b*1000
	set stat [sm blkld_ndx $ndx($k) $f1 b*1000]
	# verbose verify $ndx($k) two
	# verify $ndx($k) $nrec three 1

	verbose sync-B $j
	sync

	sm detach_xct $tx
    }

    # fork off nthreads to do the bulk loads
    sm begin_xct
	set tx [sm xct]

	set thread_list ""
	for {set j 0 }  {$j < $nthreads} {incr j} {
	    set th [fork_thread each_thread $tx $j]
	    set thread_list "$thread_list $th"
	}
	verbose ALL FORKED: $thread_list

	verbose SYNCING-A: $thread_list
	set cmd "sync_thread $thread_list"
	eval $cmd
	verbose ALL SYNCED-A: $thread_list

	verbose SYNCING-B: $thread_list
	eval $cmd
	verbose ALL SYNCED-B: $thread_list

	set cmd "join_thread $thread_list"
	eval $cmd
	verbose ALL JOINED: $thread_list

    sm commit_xct

    verbose "---- successful"

    unset f i j 
}

verbose "---- successful"
unset nrec nthreads cmd tx thread_list th
