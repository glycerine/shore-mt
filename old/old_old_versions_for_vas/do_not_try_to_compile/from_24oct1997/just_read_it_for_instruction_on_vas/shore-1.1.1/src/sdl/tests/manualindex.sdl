
module m1 {
	enum   words { wouldnt, it, be, loverly };
	struct struct_t {
		int i;
		char c;
		sequence<int> j;
	};
	interface my_obj; // forward
	typedef sequence<int> seq_t;
	typedef index<long,long> indx_t;
	typedef ref<my_obj> ref_t;

	interface my_obj {
	public:

		// reasonable:
		attribute index<char,int> indx0;
		attribute index<long,long> indx1;


		// index of refs   -- ok
		attribute index<ref_t,int>	indx2;

		// sequence in value (?ok?)
		attribute index<string,struct_t> indx3; 

		// sequence in key (?ok?)
		attribute index<struct_t,string> indx4;

		// array of indexes 
		attribute indx_t	a[3];

		// index of indexes  !!!
		attribute index<indx_t,indx_t>	b[3];
		// index of sequences  !!!
		attribute index<seq_t,seq_t>	indx5;

		// index of enumeration values
		attribute index<words,int> indx6;
	};
}
