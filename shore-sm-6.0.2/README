*****************************************************************************
*****************************************************************************
*                                                                           *
*                           Preliminaries                                   *
*                                                                           *
*****************************************************************************
*****************************************************************************
Configuration and build for 6.0.2 were tested on these LP64 platforms:
 
RHEL:
   Linux version 2.6.18-164.11.1.el5 / Intel Xeon E5520
   autoheader & autoconf 2.59
   aclocal & automake 1.9.6
   gcc 3.4.6 (Red Hat 3.4.6-4)
   gcc 4.1.2 (Red Had 4.1.2-48)
       NOTE: gcc 4.0.0 is known to have problems. 
       NOTE: gcc 4.4.0 is known to have serious bugs in optimizing, and
	         we suspect 4.5.x does also.
	   Please do not use either one.

   Tcl8.5.7, for AMD-x86-64 GNU/Linux 2.6.9 (threads-capable)
   GNU make 3.81

Solaris:
   SunOS 5.11 / sparc Sun-Fire-T200
   autoheader & autoconf 2.63
   aclocal & automake 1.9.6
   Sun C++ 5.9 SunOS_sparc Patch 124863-01 2007/07/25
   Tcl8.5.7, ELF 64-bit MSB dynamic lib SPARCV9 (threads-capable)
   GNU make 3.80

*****************************************************************************
LP32 Platforms:
This release was also configured with --disable-lp64 and
built on the following 32-bit platforms.  
>>>>>>>>>>>>>>> It is NOT thread-safe on LP-32.  <<<<<<<<<<<<<<<<<<<<<<<<<<<<
More work has to be done before this will be LP-32-capable.
(This build was for the purpose of verifying that the storage 
manager still works with raw disk partitions,
as RHEL5 doesn't support raw partitions as of this writing.)
>>>>>>>>>>>IT IS NOT SUPPORTED ON ANY 32-BIT PLATFORM.<<<<<<<<<<<<<<<<<<<<<<<

RHEL 32-bit:
   Linux version 2.6.18-164.11.1.el5 / AMD Operon 1222
   autoheader & autoconf 2.59
   aclocal & automake 1.9.6
   gcc 4.1.2 (Red Hat 4.1.2-46)
   GNU make 3.81

Slackware 32-bit:
   Linux 2.6.27.7-smp (slackware) / i686 Intel Pentium D
   autoheader & autoconf 2.63
   aclocal & automake 1.10.1
   gcc 4.2.4 (i486-slackware-unix)
   GNU make 3.81

*****************************************************************************
*****************************************************************************
*                                                                           *
*                      Documentation                                        *
*                                                                           *
*****************************************************************************
*****************************************************************************

Documentation is created by Doxygen (http://www.doxygen.org/index.html)
from the sources.  The configuration file for Doxygen is Doxyfile.

If you have Doxygen on your system, you can use "make dox".
This will create a directory dox/, with subdirectories html/.
The directory html/ is the direct output of doxygen.
To re-make the files, simply invoke doxygen thus: "doxygen Doxyfile" 
or just "doxygen". 

The starting point for a browser will be:
   dox/html/index.html

Depending on how your doxygen is built, it might create html 
files with absolute path names in the links.  

Alternatively, you can pick up a documentation release (tarball) 
and put it wherever you wish. In that tarball, 
   html/index.html
will be the starting point, and the links will use relative
paths

*****************************************************************************
*****************************************************************************
*                                                                           *
*                Configuring and Building                                   *
*                                                                           *
*****************************************************************************
*****************************************************************************

==================
STEP 0:  BOOTSTRAP
==================
If you are on a Linux platform, you might start with STEP 1 (configure); 
if you are on Solaris or if you encounter problems with configure, then run

    ./bootstrap

and follow the directions it prints for configuring (duplicated below).

==================
STEP 1: CONFIGURE
==================
You may also see the on-line documentation for detailed instructions.
On the main page (starting point, index.html) you will find a pointer to the
instructions for configuring and building.

You can type
    ./configure --help
for a list of options.

NOTE:   
    Make sure that $CXX refers to the C++ compiler that you want to use
    before you configure. Do not use gcc 4.0.0, as it has known problems.
    Preferred g++ versions are noted above.

	If you wish to use the target options for your compiler, use the
	CXXFLAGS environment variable (CXXFLAGS="-mtune=nocona", for example) on
	the configure line.  The -mtune and -march flags that are available 
	to you will depend on how your installed compiler was built.  
	Run g++ --target-help to find out what your compiler understands.
	(The g++ compiler's --target-help CPU list might not be accurate.)
	On Solaris, -xtarget=native is the default.  You can override it by
	editing Makefile.generic.  

NOTE: Don't forget to update Makefile.local to point to your local
    64-bit, threads-enabled Tcl installation 
    (needed for smsh and "make check").
    [Our apologies for not making autoconf find Tcl. There is no
    quasi-standard location for Tcl, and this turned out to be quite painful
    to do.]

NOTE:   
    Don't forget to use the --prefix=<prefix> if you plan to
    'make install'.

NOTE: We presently suspect bugs in hugetlbfs on Linux, and so we
    discourage its use.

NOTE: We find that on Solaris, it is necessary to use 
    the configuration option --enable-dependency-tracking.

==================
STEP 2: BUILD
==================
Run:
     make
     make check

If you wish to skip making smsh and/or do not have a 64-bit threads-enabled
Tcl installed, you can ignore the fact that 'make check'
will croak trying make smsh.  If it gets this far, it will 
have checked everything BUT smsh.  

==================
STEP 2: INSTALL (optional)
==================
If you wish to install the storage manager somewhere to simplify the
include and library paths for your server, run

     make install 

to have the libraries put into <prefix>/lib and the include files
into <prefix>/include, (where <prefix> was given to ./configure, above).

NOTE:
     The storage manager comprises five libraries:
     libfc.a, libcommon.a, libsthread.a, libsm.a and libatomic_ops.a.
     Each of these libraries is made in its respective source directory
     by "make".

     You can build against the source tree if you wish, in which case,
     you must give their paths and library names when linking your
     application.

     If you install into <prefix>/lib, you have the option of consolidating
     these libraries into one, by doing this:

     make install
     make libshore.a

     which will extract all the object files from all the libraries in the
     <prefix>/lib, and create a single library from the object files; it
     will then remove the 5 libraries and leave you with 
     <prefix>/lib/libshore.a.
