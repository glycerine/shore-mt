# <std-header style='data' orig-src='shore'>
#
#  $Id: sm_stats.dat,v 1.18 2012/01/02 21:52:23 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
# Since updates to these require atomic instructions, which are
# expensive, we prefer to update per-thread statistics, then
# collect them into the summary stats, which happens
# 1) when an smthread is destroyed, and 
# 2) when the thread is running an instrument transaction, and
#    it detaches that transaction (in which case, the per-thread
#    stats are cleared so they don't get double-counted).
#  
# Counters that we absolutely want to keep, whether or not transactions
# are instrumented, go here.
#
# NOTE: an xct is instrumented iff it has an allocated sm_stats_info_t, which
# contains a copy of *all* sm stats, including the TODO CLEAN THIS UP
SM Storage manager = 0x00060000 sm_stats_t {

    // page writers
    u_long bf_one_page_write     Single page written to volume
    u_long bf_two_page_write     Two-page writes to volume
    u_long bf_three_page_write     Three-page writes to volume
    u_long bf_four_page_write     Four-page writes to volume
    u_long bf_five_page_write     Five-page writes to volume
    u_long bf_six_page_write     Six-page writes to volume
    u_long bf_seven_page_write     Seven-page writes to volume
    u_long bf_eight_page_write     Eight-page writes to volume
    u_long bf_more_page_write     Over-eight-page writes to volume

    // bf cleaner 
    u_long bf_cleaner_sweeps    Number of sweeps of the bf_cleaner thread
    u_long bf_cleaner_signalled Number of sweeps initiated by a kick
    u_long bf_evicted_while_cleaning Page evicted from bp while being cleaned
	                      

    // bf cleaner percieves hot page
    u_long bf_already_evicted   Could not find page to copy for flushing (evicted)

    u_long bf_dirty_page_cleaned      Found page already cleaned (hot)
    u_long bf_flushed_OHD_page        Non-cleaner thread had to flush an old-hot-dirty page synchronously

    u_long bf_kick_full     Kicks because pool is full of dirty pages
    u_long bf_kick_replacement     Kicks because doing page replacement
    u_long bf_kick_threshold     Kicks because dirty page threshold met
    u_long bf_sweep_page_hot_skipped     Page swept was not flushed because it was hot 
    u_long bf_discarded_hot     Discarded a page from the bp when someone was waiting to latch it
    u_long bf_log_flush_all        Number of whole-log flushes by bf_cleaner
    u_long bf_log_flush_lsn        Number of partial log flushes by bf_cleaner
    u_long bf_write_out        Pages written out in background or forced
    u_long bf_sleep_await_clean     Times slept awaiting cleaner to clean a page for fix()

    u_long bf_fg_scan_cnt        Foreground scans of buffer pool

    // pin/unpin, fix/unfix
    u_long bf_unfix_cleaned      Unfix-clean cleaned a page that had a rec_lsn

    // srwlock_t (mcs_rwlock) keeps track of approximate number of
    // waits on acquires (this does NOT include contention on the
    // lock's mutex that protects its own critical sections).
    //
    // Users of srwlock_t are: latches, volume lock and fingerprint-map lock.
    // The ones that matter are latches and volume lock.
    //
    // In order to distinguish latch use from volume-lock use, we 
    // also collect latch stats, just below these two

    u_long rwlock_r_waits  Number of waits for read lock on srwlock
    u_long rwlock_w_waits  Number of waits for write lock on srwlock

    // latch stats:
    u_long need_latch_condl Conditional latch requests 
    u_long latch_condl_nowaits Conditional latch requests immediately granted 
    u_long need_latch_uncondl Unconditional latch requests 
    // NOTE: unconditional latch nowaits 
    // and latch_uncondl_waits are not computed unless
    // shore.def EXPENSIVE_LATCH_COUNTS
    u_long latch_uncondl_nowaits Uncondl latch requests immediately granted 
    u_long latch_uncondl_waits Uncondl latch requests not immediately granted 

    // Only counted if EXPENSIVE_LATCH_COUNTS is defined in shore.def:
    u_long btree_latch_wait   Waited on btree store latch (not in buffer pool)
    u_long io_latch_wait   Waited on io store latch (not in buffer pool)

    // lookups: find/grab
    u_long bf_look_cnt        Calls to find/grab
    u_long bf_grab_latch_failed      Page found but could not acquire latch 
    u_long bf_hit_cnt        Found page in buffer pool in find/grab
    // This next set of stats is available only if bf_core.cpp has
    // EXPENSIVE_LATCH_COUNTS defined, sigh.
    u_long bf_hit_wait        Found page in buffer pool but awaited latch
    u_long bf_hit_wait_any_p    Found page in b pool but awaited latch
    u_long bf_hit_wait_btree_p Found page in b pool but awaited latch
    u_long bf_hit_wait_file_p Found page in b pool but awaited latch
    u_long bf_hit_wait_keyed_p Found page in b pool but awaited latch
    u_long bf_hit_wait_lgdata_p Found page in b pool but awaited latch
    u_long bf_hit_wait_lgindex_p Found page in b pool but awaited latch
    u_long bf_hit_wait_rtree_p Found page in b pool but awaited latch
    u_long bf_hit_wait_rtree_base_p Found page in b pool but awaited latch
    u_long bf_hit_wait_extlink_p Found page in b pool but awaited latch
    u_long bf_hit_wait_stnode_p Found page in b pool but awaited latch
    u_long bf_hit_wait_zkeyed_p Found page in b pool but awaited latch
    u_long bf_hit_wait_scan Found any_p page in b pool but awaited latch in scan


    // page replacement
    u_long bf_replace_out        Pages written out to free a frame for fixing
    u_long bf_replaced_dirty     Victim for page replacement is dirty
    u_long bf_replaced_clean     Victim for page replacement is clean
    u_long bf_replaced_unused     Victim for page replacement is unused frame
    u_long bf_awaited_cleaner     Had to wait for page cleaner to be done with page

    u_long bf_no_transit_bucket      Wanted in-transit-out bucket was full 

    // prefetch
    u_long bf_prefetch_requests Requests to prefetch a page 
    u_long bf_prefetches      Prefetches performed

    u_long bf_upgrade_latch_unconditional      Unconditional latch upgrade
    u_long bf_upgrade_latch_race      Dropped and reqacquired latch to upgrade
    u_long bf_upgrade_latch_changed    A page changed during a latch upgrade race
    u_long restart_repair_rec_lsn        Cleared rec_lsn on a page dirtied by unlogged changes

    // Operations on local data volumes
    u_long vol_reads        Data volume read requests (from disk)
    u_long vol_writes        Data volume write requests (to disk)
    u_long vol_blks_written    Data volume pages written (to disk)
    u_long vol_alloc_exts    Free extents allocated to stores
    u_long vol_free_exts    Extents deallocated from stores

    // Contention on the I/O-vol monitor: these counts are
    // maintained by the volume manager, which first tries an
    // unconditional acquire (in which case it increments the nowait counter)
    // and failing that, it uses an unconditional acquire.
    // Waits for unconditional acquire are noted in
    // rwlock_r_waits and rwlock_w_waits, which also account for latch waits.
    u_long need_vol_lock_r        Times requested vol lock for read
    u_long need_vol_lock_w        Times requested vol lock for write
    u_long nowait_vol_lock_r      Times vol read lock acquired immediately
    u_long nowait_vol_lock_w      Times vol write lock acquired immediately
    u_long await_vol_lock_r   Requests not acquired immediately
    u_long await_vol_lock_w   Requests not acquired immediately


    // io_m linear searches done for allocating pages
    u_long io_m_lsearch          Times a linear search was started in io manager
    u_long io_m_lsearch_extents  Extents visited in io manager linear searches

    // Volume's per-store caches primed because found empty
    u_long vol_cache_primes      Caches primed
    u_long vol_cache_prime_fix   Fixes due to cache primes
    u_long vol_cache_clears      Caches cleared (dismounts)

    // Volume's finding last extent uses last_page_cache, but still has
    // to fix/inspect the last extent.
    u_long vol_last_extent_search      Extents inspected to find the last one

    // Volume's per-store last-page cache: maps store# -> extent#,
    // and the last page is computable from the last extent#; note that
    // this gives last reserved page, not last allocated page. 
    u_long vol_last_page_cache_update      Last extent inserted into cached
    u_long vol_last_page_cache_invalidate  Last extent cache cleared
    u_long vol_last_page_cache_find        Looked for cached last extent/page
    u_long vol_last_page_cache_hit    Found cached last extent/page

    // Volume's reserved-page cache 
    // maps store -> set of {extnum, num of unallocated pages in extent}
    u_long vol_resv_cache_insert    Inserted store,ext pair in reserved-pages ache
    u_long vol_resv_cache_erase    Removed store,ext pair in reserved-pages ache
    u_long vol_resv_cache_hit    Pages allocated from extents via cache
    u_long vol_resv_cache_fail    Failed to allocate from an extent found in cache

    u_long vol_lock_noalloc    Failed to allocate from an extent due to lock contention

    // Log operations -- per-server only
    u_long log_dup_sync_cnt    Times the log was flushed superfluously
    u_long log_daemon_wait    Times the log daemon waited for a kick
    u_long log_daemon_work    Times the log daemon flushed something
    u_long log_fsync_cnt    Times the fsync system call was used
    u_long log_chkpt_cnt    Checkpoints taken
    u_long log_chkpt_wake    Checkpoints requested by kicking the chkpt thread
    u_long log_fetches        Log records fetched from log (read)
    u_long log_inserts        Log records inserted into log (written)
    u_long log_full        A transaction encountered log full
    u_long log_full_old_xct    An old transaction had to abort
    u_long log_full_old_page    A transaction had to abort due to holding a dirty old page
    u_long log_full_wait    A log full was resolved by waiting for space
    u_long log_full_force    A log full was resolved by forcing the buffer pool
    u_long log_full_giveup    A transaction aborted because neither waiting nor forcing helped
    u_long log_file_wrap    Log file numbers wrapped around

    u_long log_bytes_generated    Bytes of log records inserted 
    u_long log_bytes_written    Bytes written to log including skip and padding
    u_long log_bytes_rewritten  Bytes written minus generated    

    u_long log_bytes_generated_rb    Bytes of log records inserted during rollback
    double  log_bytes_rbfwd_ratio    Ratio of rollback: forward log bytes inserted

    u_long log_flush_wait          Flushes awaited log flush daemon
    u_long log_short_flush      Log flushes <= 1 block
    u_long log_long_flush          Log flushes > 1 block

    // Lock manager: Deadlock detector-related
    u_long lock_deadlock_cnt    Deadlocks detected
    u_long lock_false_deadlock_cnt    False positive deadlocks
    u_long lock_dld_upd_waitmap_cnt    Wait map updates for deadlock detection
    u_long lock_dld_call_cnt    Deadlock detector total calls
    u_long lock_dld_first_call_cnt    Deadlock detector first called for one lock
    u_long lock_dld_false_victim_cnt    Deadlock detector victim not blocked
    u_long lock_dld_victim_self_cnt    Deadlock detector picked self as victim 
    u_long lock_dld_victim_other_cnt    Deadlock detector picked other as victim 
    u_long lock_dld_retry    Awaited lock release woke up waiting thread
    u_long lock_dld_deadlock    Deadlock detection woke up waiting thread
    u_long lock_dld_timeout    Timeout woke up waiting thread

    u_long nonunique_fingerprints    Smthreads created a non-unique fingerprint
    u_long unique_fingerprints    Smthreads created a unique fingerprint
     
    // Record pinning:
    u_long rec_pin_cnt        Times records were pinned in the buffer pool
    u_long rec_unpin_cnt    Times records were unpinned
    u_long rec_repin_cvt    Converted latch-lock to lock-lock deadlock

    // file manager
    u_long fm_pagecache_hit    Found recently-used page
    u_long fm_page_nolatch         Couldn't latch recently-used page 
    u_long fm_page_moved    Recently-used page moved to new store
    u_long fm_page_invalid    Recently-used page no longer allocated to this store
    u_long fm_page_nolock    Recently-used page could not be locked for record alloc
    u_long fm_alloc_page_reject    Rejected attempt to allocate a page: could not latch
    u_long fm_page_full        Recently-used page was full
    u_long fm_error_not_handled        Unhandled error in latch-lock-get-slot 
    u_long fm_ok            Success in latch-lock-get-slot
    u_long fm_histogram_hit    Histogram says file search worthwhile
    u_long fm_search_pages    Pages inspected in file search
    u_long fm_bogus_pbucketmap    Pbucketmap was inaccurate 
    u_long fm_search_failed    File search unsuccessful
    u_long fm_search_hit    File search successful
    u_long fm_lastpid_cached    Have last pid cached
    u_long fm_lastpid_hit       Found slot on page lastpid 
    u_long fm_alloc_pg        Allocated a new page
    u_long fm_ext_touch        Updates to extent info
    u_long fm_ext_touch_nop    No-op updates to extent info
    u_long fm_nospace        Could not create rec
    u_long fm_cache            Policy permitted looking in cache (number of probes)
    u_long fm_compact        Policy permitted searching file
    u_long fm_append        Policy permitted appending to file
    u_long fm_appendonly    Policy required strict append

    // Btree stats:
    u_long bt_find_cnt        Btree lookups (find_assoc())
    u_long bt_insert_cnt    Btree inserts (create_assoc())
    u_long bt_remove_cnt    Btree removes (destroy_assoc())
    u_long bt_traverse_cnt    Btree traversals
    u_long bt_partial_traverse_cnt    Btree traversals starting below root
    u_long bt_restart_traverse_cnt    Restarted traversals
    u_long bt_posc        POSCs established
    u_long bt_scan_cnt        Btree scans started
    u_long bt_splits        Btree pages split (interior and leaf)
    u_long bt_cuts        Btree pages removed (interior and leaf)
    u_long bt_grows        Btree grew a level
    u_long bt_shrinks        Btree shrunk a level
    u_long bt_links        Btree links followed
    u_long bt_upgrade_fail_retry    Failure to upgrade a latch forced a retry
    u_long bt_clr_smo_traverse    Cleared SMO bits on traverse
    u_long bt_pcompress        Prefixes compressed
    u_long bt_plmax        Maximum prefix levels encountered

    // Sort 
    u_long sort_keycmp_cnt    Key-comparison callbacks
    u_long sort_lexindx_cnt    Lexify index key callbacks
    u_long sort_getinfo_cnt    Create-sort-key callbacks
    u_long sort_mof_cnt        Marshal-object callbacks
    u_long sort_umof_cnt    Unmarshal-object callbacks
    u_long sort_memcpy_cnt    Memcpys
    u_long sort_memcpy_bytes    Bytes copied in memcpy
    u_long sort_keycpy_cnt    Keycopies (part of memcpy_cnt)
    u_long sort_mallocs        Allocations
    u_long sort_malloc_bytes    Bytes allocated total
    u_long sort_malloc_hiwat    Max allocated at any one time
    u_long sort_malloc_max    Largest chunk allocated
    u_long sort_malloc_curr    Amt presently allocated
    u_long sort_tmpfile_cnt     Records written to temp files
    u_long sort_tmpfile_bytes     Bytes written to temp files
    u_long sort_duplicates     Duplicate records eliminated
    u_long sort_page_fixes     Orig slotted pages fixed by sort for read
    u_long sort_page_fixes_2     Tmp file slotted pages fixed by sort for read
    u_long sort_lg_page_fixes     Large obj pages explicitly fixed by sort
    u_long sort_rec_pins     Recs explicitly pinned by sort
    u_long sort_files_created     Files created by sort
    u_long sort_recs_created     Final records created by sort
    u_long sort_rec_bytes       Bytes in final records
    u_long sort_runs         Runs merged
    u_long sort_run_size     Pages of input recs per run
    u_long sort_phases         Polyphase phases
    u_long sort_ntapes         Number of pseudo-tapes used by sort

    // Page operation counts
    // NOTE***************************
    // these per-page-type-fix counts reflect the times the
    // per-page-class fix method is called, but NOT the times it
    // resulted in a bf_m::fix call. If the page is already fixed
    // sufficient mode with the page_p, the buffer manager need not
    // be called.
    // You see many more extent-page fixes (at least an order of
    // magnitude) than the other fixes; this is because searches for
    // free extents and for extents with space involve many fixes 
    // of the same page using the same handle (different extent number)
    // where bf_m::unfix + bf_m::fix is not needed.
    //  
    u_long any_p_fix_cnt        Fix method called for unknown type
    u_long btree_p_fix_cnt        Btree_p fix method called
    u_long file_p_fix_cnt        File_p fix method called
    u_long keyed_p_fix_cnt        Keyed_p fix method called
    u_long lgdata_p_fix_cnt        Lgdata_p fix method called
    u_long lgindex_p_fix_cnt        Lgindex_p fix method called
    u_long rtree_p_fix_cnt        Rtree_p fix method called
    u_long rtree_base_p_fix_cnt        Rtree_base_p fix method called
    u_long extlink_p_fix_cnt        Extlink_p fix method called
    u_long stnode_p_fix_cnt        Stnode_p fix method called
    u_long zkeyed_p_fix_cnt        Zkeyed_p_fix_method_called
    u_long page_fix_cnt        Times page_p::_fix was called (even if page already fixed)

    // Times the buffer manager was needed for a page fix:
    u_long bf_fix_cnt        Times bp fix called  (conditional or unconditional)
    u_long bf_refix_cnt        Times pages were refixedn in bp (cheaper than fix)
    u_long bf_unfix_cnt        Times pages were unfixed in bp

    u_long vol_check_owner_fix    Fixes to check page allocation-to-store status
    u_long page_alloc_cnt    Pages allocated
    u_long page_dealloc_cnt    Pages deallocated

    // Extent operation counts
    u_long ext_lookup_hits    Hits in extent lookups in cache 
    u_long ext_lookup_misses    Misses in extent lookups in cache 
    u_long alloc_page_in_ext    Requests to allocate a page in a given extent
    u_long vol_free_page       Extents fixed to free a page 
    u_long vol_next_page       Next-page requests (might fix more than one ext map page)
    u_long vol_next_page_with_space       Next-page-with-space requests 
    u_long vol_find_free_exts  Free extents requested

    // Transaction-related stats
    u_long xct_log_flush      Log flushes by xct for commit/prepare
    u_long begin_xct_cnt    Transactions started
    u_long commit_xct_cnt    Transactions committed
    u_long abort_xct_cnt    Transactions aborted
    u_long log_warn_abort_cnt    Transactions aborted due to log space warning
    u_long prepare_xct_cnt    Transactions prepared
    u_long rollback_savept_cnt    Rollbacks to savepoints (not incl aborts)
    u_long internal_rollback_cnt    Internal partial rollbacks 
    //
    u_long s_prepared        Externally coordinated prepares

    // Thread/xct/log/mutex-related stats
    // sdesc_cache_t: 
    u_long sdesc_cache_hit    Times sdesc_cache hit on cached indexes
    u_long sdesc_cache_search    Times sdesc_cache was searched
    u_long sdesc_cache_search_cnt    Entries searched
    u_long sdesc_cache_miss    Times sdesc_cache missed altogether

    u_long mpl_attach_cnt    Times a thread was not the only one attaching to a transaction
    u_long anchors            Log Anchors grabbed
    u_long compensate_in_log    Compensations written in log buffer
    u_long compensate_in_xct    Compensations written in xct log buffer
    u_long compensate_records    Compensations written as own log record 
    u_long compensate_skipped    Compensations would be a no-op
    u_long log_switches        Times log turned off
    u_long get_logbuf            Times acquired log buf for xct
    u_long await_1thread_xct    Times blocked on 1thread mutex for xct (mcs_lock only)


    //
    // Lock manager related stats
    //
    u_long lock_query_cnt       High-level query for lock information
    u_long unlock_request_cnt    High-level unlock requests
    u_long lock_request_cnt     High-level lock requests
    u_long lock_acquire_cnt    Acquires to satisfy high-level requests
    u_long lock_head_t_cnt    Locks heads put in table for chains of requests
    u_long lock_await_alt_cnt    Transaction had a waiting thread in the lock manager and had to wait on alternate resource
    u_long lock_extraneous_req_cnt Extraneous requests (already granted)
    u_long lock_conversion_cnt  Requests requiring conversion

    // Lock cache
    u_long lock_cache_hit_cnt   Hits on lock cache (avoid acquires)
    u_long lock_request_t_cnt    Lock request structures chained off lock heads

    // Lock escalation
    u_long lock_esc_to_page    Number of escalations to page level
    u_long lock_esc_to_store    Number of escalations to store level
    u_long lock_esc_to_volume    Number of escalations to volume level

    // Lock types acquired
    u_long lk_vol_acq        Volume locks acquired
    u_long lk_store_acq        Store locks acquired
    u_long lk_page_acq        Page locks acquired
    u_long lk_kvl_acq        Key-value locks acquired
    u_long lk_rec_acq        Record locks acquired
    u_long lk_ext_acq        Extent locks acquired
    u_long lk_user1_acq        User1 locks acquired
    u_long lk_user2_acq        User2 locks acquired
    u_long lk_user3_acq        User3 locks acquired
    u_long lk_user4_acq        User4 locks acquired

    // Lock types that had to wait
    u_long lock_wait_cnt    Lock acquires that waited in smthread_block
    u_long lock_block_cnt    Times lock acquire called smthread_block
    u_long lk_vol_wait        Volume locks waited
    u_long lk_store_wait        Store locks waited
    u_long lk_page_wait        Page locks waited
    u_long lk_kvl_wait        Key-value locks waited
    u_long lk_rec_wait        Record locks waited
    u_long lk_ext_wait        Extent locks waited
    u_long lk_user1_wait        User1 locks waited
    u_long lk_user2_wait        User2 locks waited
    u_long lk_user3_wait        User3 locks waited
    u_long lk_user4_wait        User4 locks waited
};

