#ifndef LOGFUNC_GEN_H
#define LOGFUNC_GEN_H

/* DO NOT MODIFY --- generated by ../../tools/logdef.pl from logdef.dat 
                     on Fri Dec 17 15:55:05 2010

<std-header orig-src='shore' genfile='true'>

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

*/

#include "w_defines.h"

/*  -- do not edit anything above this line --   </std-header>*/


extern "C" rc_t log_comment(const char* msg);
extern "C" rc_t log_compensate(const lsn_t& rec_lsn);
extern "C" rc_t log_xct_abort();
extern "C" rc_t log_xct_freeing_space();
extern "C" rc_t log_xct_end();
extern "C" rc_t log_xct_end_group(const xct_t** l, int llen);
extern "C" rc_t log_xct_prepare_st(const gtid_t* g, const server_handle_t& h);
extern "C" rc_t log_xct_prepare_lk(int num, lock_mode_t mode, lockid_t* lks);
extern "C" rc_t log_xct_prepare_alk(int num, lockid_t* lks, lock_mode_t* modes);
extern "C" rc_t log_xct_prepare_stores(int num, const stid_t* stids);
extern "C" rc_t log_xct_prepare_fi(int numex, int numix, int numsix, int numextent, const lsn_t& first, int rsvd, int ready, int used);
extern "C" rc_t log_alloc_file_page(const lpid_t& pid, const lsn_t& rec_lsn);
extern "C" rc_t log_alloc_pages_in_ext(const page_p& page, snum_t snum, extnum_t idx, const Pmap& pmap);
extern "C" rc_t log_free_pages_in_ext(const page_p& page, snum_t snum, extnum_t idx, const Pmap& pmap);
extern "C" rc_t log_create_ext_list(const page_p& page, const stid_t& stid, extnum_t prev, extnum_t next, extnum_t count, const extnum_t* list);
extern "C" rc_t log_free_ext_list(const page_p& page, const stid_t& stid, extnum_t head, extnum_t count);
extern "C" rc_t log_set_ext_next(const page_p& page, extnum_t ext, extnum_t new_next);
extern "C" rc_t log_store_operation(const page_p& page, const store_operation_param& op);
extern "C" rc_t log_page_link(const page_p& page, shpid_t new_prev, shpid_t new_next);
extern "C" rc_t log_page_insert(const page_p& page, int idx, int cnt, const cvec_t* vec);
extern "C" rc_t log_page_remove(const page_p& page, int idx, int cnt);
extern "C" rc_t log_page_format(const page_p& page, int idx, int cnt, const cvec_t* vec);
extern "C" rc_t log_page_mark(const page_p& page, int idx);
extern "C" rc_t log_page_reclaim(const page_p& page, int idx, const cvec_t& vec);
extern "C" rc_t log_page_shift(const page_p& page, int idx2, page_s::slot_length_t off2, page_s::slot_length_t len2, int idx1, page_s::slot_length_t off1);
extern "C" rc_t log_page_splice(const page_p& page, int idx, int start, int len, const cvec_t& vec);
extern "C" rc_t log_page_splicez(const page_p& page, int idx, int start, int len, int osave, int nsave, const cvec_t& vec);
extern "C" rc_t log_page_set_byte(const page_p& page, int idx, u_char old, u_char bits, int op);
extern "C" rc_t log_page_image(const page_p& page);
extern "C" rc_t log_btree_purge(const page_p& page);
extern "C" rc_t log_btree_insert(const page_p& page, int idx, const cvec_t& key, const cvec_t& el, bool unique);
extern "C" rc_t log_btree_remove(const page_p& page, int idx, const cvec_t& key, const cvec_t& el, bool unique);
extern "C" rc_t log_rtree_insert(const page_p& page, int idx, const nbox_t& key, const cvec_t& el);
extern "C" rc_t log_rtree_remove(const page_p& page, int idx, const nbox_t& key, const cvec_t& el);


#endif
