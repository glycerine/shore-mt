# <std-header style='tcl' orig-src='shore'>
#
#  $Id: deadlock.3,v 1.18 2010/06/08 22:28:29 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

# Test Upgrade deadlock detection with many threads competing for the
# same upgrade.  Each first acquires an SH and then each tries to upgrade
# to EX.
#
#    {1SH, 2SH} <-- 1EX <-- 2EX
#

set o1 "s(10.34)"

proc t1 {} {
    global o1
	verbose "{ t1 sync A"
    sync
	verbose "t1 got sync A }"

    sm begin_xct
	set tid [sm xct_to_tid [sm xct]]
    sm lock $o1 SH LONG
    verbose "t1: $tid acquired SH on o1"

	verbose "{ t1 sync B"
    sync
	verbose "t1 got sync B }"
	# sync here for dumping lock table
	verbose "{ t1 sync C"
    sync
	verbose "t1 got sync C}"

    verbose "t1: $tid attempting to acquire EX on o1"
    set caught [catch {sm lock $o1 EX LONG} errorno]
	if {$caught == 0} {
      sm commit_xct
	} else {
       verbose "t1: $tid (EXPECTED E_DEADLOCK) error is $errorno"
       assert {error_is $errorno E_DEADLOCK}
	   sm dump_locks
       verbose "t1 $tid aborting"
	   sm abort_xct
       verbose "t1 $tid aborted"
    }
	verbose "{ t1 sync D"
    sync
	verbose "t1 got sync D}"
}

set nsh 65

for { set i 0 } { $i < $nsh } { incr i} {
   set a($i) [fork_thread t1 {}]
}

sm sleep 100
for { set i 0 } { $i < $nsh } { incr i} {
   verbose sync_thread A to start a($i)
   sync_thread $a($i)
}

for { set i 0 } { $i < $nsh } { incr i} {
   verbose sync_thread B a($i)
   sync_thread $a($i)
}
sm sleep 200
verbose "*********************************************************"
sm dump_locks
verbose "*********************************************************"


sm sleep 100

for { set i 0 } { $i < $nsh } { incr i} {
   verbose sync_thread C a($i)
   sync_thread $a($i)
}

sm sleep 200
verbose "*********************************************************"
sm dump_locks
verbose "*********************************************************"

for { set i 0 } { $i < $nsh } { incr i} {
   verbose sync_thread D a($i)
   sync_thread $a($i)
   verbose join_thread a($i)
   join_thread $a($i)
}

unset a nsh o1  

sm sleep 100
echo [pnzstats [sm gather_stats]]

