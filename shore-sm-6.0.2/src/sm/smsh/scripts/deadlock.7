
# <std-header style='tcl' orig-src='shore'>
#
#  $Id: deadlock.1,v 1.15 2010/06/08 22:28:29 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#  Testing that the following scenario is NOT a deadlock.
#  It requires that t2 have 2 threads.
#
#  A: {t1 X, t2a SH} <-- t3 SH
#  B: {t3 X} <-- t2b SH
#

##########  global variables  ##########

set A "10001"
set B "20002"
set indent "              "

proc t1 {} {
    global A B indent
    sm begin_xct
    verbose "$indent t1: requesting \"$A\" EX LONG"
    set caught [catch [sm lock $A EX LONG] err]
	if {$caught == 0} {
		verbose "$indent t1: lock worked"
	} else {
       verbose "$indent t1 caught $caught err $err"
    }
	set granted [sm query_lock $A]

    verbose "$indent t1: granted $granted on A=$A"

	verbose "t1 first sync"
sync
	verbose "t1 second sync"
sync
	verbose "t1 third sync"
sync
	verbose "t1 fourth sync"
sync
	verbose "$indent t1 commit"
    sm commit_xct
}

proc t2a {} {
    global A B T2 indent
	verbose "$indent t2a sm attach_xct |$T2|"
    set command "sm attach_xct $T2"
	# verbose command "t2a |$command|"
	eval $command
    verbose "$indent t2a: requesting \"$A\" SH LONG"
    set caught [catch [sm lock $A SH LONG] err]
	if {$caught == 0} {
		verbose "$indent t2a: lock worked"
	} else {
       verbose "$indent t2a caught $caught err $err"
    }
	set granted [sm query_lock $A]

    verbose "$indent t2a: granted $granted on A=$A"
	verbose "t2a third sync"
sync
    set command "sm detach_xct $T2"
	# verbose command "t2a |$command|"
	eval $command
	verbose "t2a fourth sync"
sync
}

proc t2b {} {
    global A B T2 indent
	verbose "t2b first sync"
sync
	verbose "t2b second sync"
sync
    set command "sm attach_xct $T2"
	# verbose command "t2b:|$command|"
	eval $command
    verbose "$indent t2b: requesting \"$B\" SH LONG"
    set caught [catch [sm lock $B SH LONG] err]
	if {$caught == 0} {
		verbose "$indent t2b: lock worked"
	} else {
       verbose "$indent t2b caught $caught err $err"
    }
	set granted [sm query_lock $B]

    verbose "$indent t2b: granted $granted on B=$B"
	verbose "t2b third sync"
sync
    set command "sm detach_xct $T2"
	# verbose command "t2b:|$command|"
	eval $command
	verbose "t2b fourth sync"
sync
}

proc t3 {} {
    global A B indent
    sm begin_xct
    verbose "$indent t3: requesting \"$B\" EX LONG"
    set caught [catch [sm lock $B EX LONG] err]
	if {$caught == 0} {
		verbose "$indent t3: lock worked"
	} else {
       verbose "$indent t3 caught $caught err $err"
    }
	set granted [sm query_lock $B]

    verbose "$indent t3: granted $granted on B=$B"
	verbose "t3 first sync"
sync
	verbose "t3 second sync"
sync
	verbose "t3 third sync"
sync
	verbose "t3 fourth sync"
sync
    verbose "$indent t3: EXPECT DEADLOCK requesting \"$A\" SH LONG"
    set caught [catch [sm lock $A SH LONG] err]
	if {$caught == 0} {
		verbose "$indent t3: lock worked"
	} else {
       verbose "$indent t3 caught $caught err $err"
    }
	set granted [sm query_lock $A]
    verbose "$indent t3: granted $granted on A=$A"
    sm commit_xct
}

##########  main  ##########
# create t2/T2
sm begin_xct
set T2 [sm xct]
# verbose "T2 is |$T2|"
sm detach_xct $T2

    set x1 [fork_thread t1 {}]
	# verbose t1 is $x1
    set x2 [fork_thread t2a {}]
	# verbose t2a is $x2
    set x3 [fork_thread t3 {}]
	# verbose t3 is $x3
    set x4 [fork_thread t2b {}]
	# verbose t2b is $x4

	sm sleep 40

	verbose "first sync_thread $x1 (not $x2) $x3 $x4"
    sync_thread $x1 $x3 $x4
	sm sleep 10
    verbose "setup completed. Everyone should be waiting on 2nd sync. "
    if {$verbose_flag}  {
		sm dump_locks
    }

	verbose "second sync_thread $x1 (not $x2) $x3 $x4"
    sync_thread $x1 $x3 $x4
	sm sleep 400
    verbose "Everyone should be waiting on 3nd sync. "
    if {$verbose_flag}  {
		sm dump_threads
		sm dump_locks
    }

	verbose "third sync_thread $x1 $x2 $x3 $x4"
    sync_thread $x1 $x2 $x3 $x4
	sm sleep 100
    verbose "Everyone should be waiting on 4th sync. "
    if {$verbose_flag}  {
		sm dump_locks
    }

	verbose "fourth sync_thread $x1 $x2 $x3 $x4"
    sync_thread $x1 $x2 $x3 $x4

    join_thread $x1 $x2 $x3 $x4
verbose "SUCCESS"

sm attach_xct $T2
# verbose "t2 commit"
sm commit_xct
unset A B T2
unset x1 x2 x3 x4
unset caught

