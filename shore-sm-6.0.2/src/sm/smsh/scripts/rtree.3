# <std-header style='tcl' orig-src='shore'>
#
#  $Id: rtree.3,v 1.28 2010/10/07 15:12:40 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
# start up
#
source $script_dir/vol.init

set nrec 200
set u "2.-1500.-1500.1500.1500"

#
#create and load a file with boxes
#
set boxes [open boxes w]
sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
	set f1 [sm create_file $volid]
	verbose f1 = $f1
	for {set i 0} {$i < $nrec} {incr i} {
		set box($i) [sm next_box $u]
	# Verify that it's unique
	    set ok 0
		while { $ok == 0 } {
		    set ok 1
			for {set j 1} {$j < $i} {incr j} {
			   if { $box($i) == $box($j) } {
					set box($i) [sm next_box $u]
					set ok 0
					break
			   }
			}
		}
		puts $boxes "elem=($i) box.string=($box($i))"
		sm create_typed_hdr_rec $f1 $box($i) 4 $i spatial 
	}
sm commit_xct

#
# create and load rtree
#
sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
	set ndx [sm create_md_index $volid 2 rtree]
	verbose created rtree $ndx

	set stat [sm blkld_md_ndx $ndx $f1 70 110 $u]
	verbose created and loaded rtree $ndx
	verbose stat: $stat

	# this was an attempt to avoid the verbose output but it doesn't work
	# set out [sm draw_rtree $ndx graph_out]
	# verbose $out
	# sm print_md_index $ndx out
	# verbose $out
	# unset out
sm commit_xct

sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
	verbose probe:
	for {set i 1} {$i < $nrec} {incr i} {
		set r [sm find_md_assoc $ndx $box($i)]
		verbose association returns $r
		set el [lindex $r 0]
		verbose i:$i box:$box($i) el:$el
		if [expr $i == $el] {
		} else {
		   echo ndx:$ndx i:$i box:$box($i) el:$el
		}
		assert {expr $i == $el}
	}
	verbose "---- successful"

sm commit_xct

sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]

sm rtree_stats $ndx

#set q "2.-500.-500.500.500"
set q "2.-100.-100.100.100"

sm rtree_query $ndx / $q
sm rtree_query $ndx || $q
sm rtree_query $ndx << $q

sm commit_xct

dstats $volid

sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
sm destroy_md_index $ndx
sm destroy_file $f1
sm commit_xct

unset stat 
unset f1 
unset nrec ndx box i q r u el

