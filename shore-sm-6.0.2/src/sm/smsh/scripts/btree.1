# <std-header style='tcl' orig-src='shore'>
#
#  $Id: btree.1,v 1.48 2010/10/07 15:12:40 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#  Load a btree, and verify its content
#

set form_len [expr {$short_form_len - 15}]
# NOTE: this form_len is pretty fragile.It adds the #chars needed to 
# append the record#, so if you insert 1000 records, you'll be inserting 4-byte
# elements, whereas if you use only 10, you'll insert 2-byte elements. 
# There's not an easy way to take that into account.

proc scan_up_partial {ndx lb ub nrec} {
    verbose "scan up partial:" $lb $ub 
    set scan [sm create_scan $ndx >= $lb <= $ub]

    set lb [string trimleft $lb 0]
    set ub [string trimleft $ub 0]

    for {set i 1} {$i <= $nrec} {incr i} {
		set r [sm scan_next $scan]
        if {[string compare $r eof] == 0} then { break }
		set key [string trimleft [lindex $r 0] 0]
		set el [lindex $r 1]
		verbose "scanned ($key, $el)"
		assert {expr $key == $el}
		assert {expr $key == $lb + $i - 1}
    }

    if [expr $i > $nrec] {
	} else {
		# print some stuff in anticipation of the assert
		echo i:$i r:$r expected i=nrec=$nrec
        echo "from scan up partial: $ndx $lb $ub $nrec"
	}
    assert {expr $i > $nrec}
    assert {expr [string compare [sm scan_next $scan] eof] == 0}
    sm destroy_scan $scan
    verbose "---- successful"
}

proc scan_up {ndx nrec}  {
    #
    # verify ascending
    #
    verbose "scan up:"
    set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
    for {set i 1} {$i <= $nrec} {incr i}  {
        set r [sm scan_next $scan]
	if {[string compare $r eof] == 0} then { break }
        set key [string trimleft [lindex $r 0] 0]
        set el [lindex $r 1]
        verbose "scanned ($key, $el)"
        assert {expr $key == $el}
        assert {expr $i == $key}
    }

    if [expr $i > $nrec] {
	} else {
		# print some stuff in anticipation of the assert
		echo i:$i r:$r expected i=nrec=$nrec
        echo "from scan up partial: $ndx $lb $ub $nrec"
	}
    assert {expr $i > $nrec}
    assert {expr [string compare [sm scan_next $scan] eof] == 0}
    sm destroy_scan $scan
    verbose "---- successful"
}

proc probe {ndx nrec} {
    global form_len
    verbose "probe:"
    for {set i 1} {$i <= $nrec} {incr i} {
        set el [sm find_assoc $ndx [formatlong 0 $form_len %010d $i]]
        assert {expr $i == $el}
        verbose2 probed $i
    }
    verbose "---- successful"
}

#
# start up
#
source $script_dir/vol.init

if {$logging==0} {
    echo "Logging off: script not run. "
} else {
    verbose2 [sm gather_stats reset]
    verbose2 [vtable thread]

    set nrec 120

    #
    # create index and load it up 
    #
    sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
	verbose create index
    set ndx [sm create_index $volid btree]
    verbose created index $ndx
    sm commit_xct

    sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
	verbose load up index
    for {set i 1} {$i <= $nrec} {incr i} {
		verbose inserting $i / $nrec length $form_len + 10
		sm create_assoc $ndx [formatlong 0 $form_len %010d $i] $i
		verbose inserted
    }
    verbose restart
    restart

    sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
    verbose scan_up $ndx 0
    scan_up $ndx 0
    verbose destroy_index
    sm destroy_index $ndx
    verbose commit
    sm commit_xct

    sm begin_xct
	verbose tid [sm xct_to_tid [sm xct]]
	verbose create index
    set ndx [sm create_index $volid btree]
    verbose created index $ndx
    for {set i 1} {$i <= $nrec} {incr i} {
		verbose inserting $i  / $nrec len $form_len + 10
		sm create_assoc $ndx [formatlong 0 $form_len %010d $i] $i
    }

    verbose commit
    sm commit_xct
    verbose after create

	if {$logging==1} {
		verbose restart
		restart

		sm begin_xct
		verbose tid [sm xct_to_tid [sm xct]]
		verbose scan up
		scan_up $ndx $nrec
		verbose probe
		probe $ndx $nrec
		verbose scan up partial
		scan_up_partial $ndx [formatlong 0 $form_len %010d 2] \
				[formatlong 0 $form_len %010d [expr {$nrec - 1}]] [expr {$nrec - 2}]
		verbose destroy index
		sm destroy_index $ndx
		sm commit_xct
	}

    verbose2 [sm gather_stats]
    verbose2 [vtable thread]

    unset ndx
    unset nrec
    unset i
}
unset form_len

